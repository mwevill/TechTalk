stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    continueOnError: true
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
    - task: NuGetToolInstaller@0

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: code'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: Demo

- stage: Deploy
  jobs:
  # track deployments on the environment
  - deployment: DeployWeb
    pool:
      vmImage: 'windows-latest'
  # creates an environment if it doesnâ€™t exist
    environment: 'AcceptanceTest'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          - script: echo my first deployment
          - task: AzureResourceGroupDeployment@2
            displayName: 'Azure Deployment:Create Or Update Resource Group action on $(ResourceGroup)'
            inputs:
              azureSubscription: 'SFA-DAS-DevTest'
              resourceGroupName: '$(ResourceGroup)'
              location: 'West Europe'
              csmFile: '$(System.DefaultWorkingDirectory)/das-employer-favourites/drop/azure/template.json'
              overrideParameters: '-resourceEnvironmentName "$(resourceEnvironmentName)" -environmentName "$(environmentName)" -sharedAppServicePlanName "$(sharedAppServicePlanName)" -sharedAppServicePlanResourceGroup "$(sharedAppServicePlanResourceGroup)" -configurationStorageConnectionString "$(configurationStorageConnectionString)" -loggingRedisConnectionString "$(loggingRedisConnectionString)" -internalApiCustomHostname "$(internalApiCustomHostname)" -internalApiCertificateName "$(internalApiCertificateName)" -serviceName "$(serviceName)" -appServiceCustomeHostname "$(appServiceCustomeHostname)" -appServiceCertificateName "$(appServiceCertificateName)" -OdicAuthority "$(OdicAuthority)" -OdicMetaDataAddress "$(OdicMetaDataAddress)" -OdicClientSecret "$(OdicClientSecret)" -azureStorageConnectionString "$(azureStorageConnectionString)"  -OdicID "$(OdicID)" -ActiveDirectoryid "$(ActiveDirectoryid)" -ActiveDirectorytenant "$(ActiveDirectorytenant)" -ActiveDirectoryidentifier "$(ActiveDirectoryidentifier)" -ApiBaseUrl "$(ApiBaseUrl)" -ClientId "$(ClientId)" -ClientSecret "$(ClientSecret)" -IdentifierUri "$(IdentifierUri)" -AccountsHomePage "$(AccountsHomePage)" -AccountsApiBaseUrl "$(AccountsApiBaseUrl)" -AccountsApiClientSecret "$(AccountsApiClientSecret)" -AccountsApiIdentifierUri "$(AccountsApiIdentifierUri)" -AccountsApiClientId "$(AccountsApiClientId)"'
              deploymentOutputs: armoutputs

 